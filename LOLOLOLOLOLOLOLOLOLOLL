-- External Script (e.g., vortex.lua)
local players = game:GetService("Players")
local runService = game:GetService("RunService")
local tweenService = game:GetService("TweenService")
local userInputService = game:GetService("UserInputService")
local lastUpdated = tick() -- Store the time of the last update

local updateInterval = 0.1 -- Update every 0.1 seconds to reduce unnecessary processing

local cameraLockEnabled = false -- Boolean to track if camera lock is active
local targetPlayer = nil -- Currently targeted player

local Aimlock = true
local MousePressed = false

-- Whitelist of Roblox IDs
local whitelist = {
    7278444088, -- Replace with actual Roblox user IDs
    9876543210, -- Replace with actual Roblox user IDs
    -- Add more user IDs as needed
}

-- Function to check if the player's Roblox ID is in the whitelist
local function isWhitelisted(player)
    for _, id in ipairs(whitelist) do
        if player.UserId == id then
            return true
        end
    end
    return false
end

-- Function to update hitbox and collisions
local function updatePlayerHitbox(player)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = player.Character.HumanoidRootPart
        -- Only update if the size or collision status has changed
        if hrp.Size ~= getgenv().HitboxSize then
            hrp.Size = getgenv().HitboxSize
        end
        if hrp.CanCollide then
            hrp.CanCollide = false
        end
    end
end

-- Show Loading Notification
local function showLoadingNotification()
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Whitelisted", 
        Text = "Loading...",
        Icon = "rbxassetid://1234567890", -- Optional: You can replace this with an actual icon
        Duration = 5 -- Duration of the notification (in seconds)
    })
end

-- Check if the player is whitelisted at the start
if not isWhitelisted(players.LocalPlayer) then
    players.LocalPlayer:Kick("You're not whitelisted gng")
    return -- Exit script if not whitelisted
end

-- Show Loading Notification once the player is whitelisted
showLoadingNotification()

-- Find the closest player to the mouse position
local function getClosestPlayerToMouse()
    local mousePos = userInputService:GetMouseLocation()
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in ipairs(players:GetPlayers()) do
        if player ~= players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local playerPosition = player.Character.HumanoidRootPart.Position
            local screenPos, onScreen = game.Workspace.CurrentCamera:WorldToScreenPoint(playerPosition)
            if onScreen then
                local distance = (Vector2.new(mousePos.X, mousePos.Y) - Vector2.new(screenPos.X, screenPos.Y)).magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    return closestPlayer
end

-- Lock camera smoothly onto a target
local function lockCamera(targetPlayer)
    local camera = game.Workspace.CurrentCamera
    local targetPosition = targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if targetPosition then
        local targetCFrame = targetPosition.CFrame
        -- Create a Tween to smoothly transition the camera
        local tweenInfo = TweenInfo.new(getgenv().Smoothness, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
        local goal = {CFrame = targetCFrame}
        local tween = tweenService:Create(camera, tweenInfo, goal)
        tween:Play()
    end
end

-- Handle camera lock toggle with custom key press (e.g., "V" by default)
userInputService.InputBegan:Connect(function(input)
    if input.KeyCode == getgenv().AimlockKey then
        if AimlockTarget == nil then
            local target = getClosestPlayerToMouse()
            if target then
                AimlockTarget = target
                lockCamera(AimlockTarget)
            end
        else
            AimlockTarget = nil
        end
    end
end)

-- Now that the player is whitelisted, proceed with hitbox expansion
runService.Heartbeat:Connect(function()
    -- Only run the hitbox expander if the player is whitelisted
    if isWhitelisted(players.LocalPlayer) then
        local currentTime = tick()
        if currentTime - lastUpdated >= updateInterval then
            -- Update hitboxes for all players, except the local player
            for _, v in next, players:GetPlayers() do
                if v ~= players.LocalPlayer then
                    updatePlayerHitbox(v)
                end
            end
            lastUpdated = currentTime -- Update the last update time
        end
    end

    -- Camera Lock (Aimlock) processing
    if Aimlock == true and AimlockTarget then
        if AimlockTarget.Character and AimlockTarget.Character:FindFirstChild("HumanoidRootPart") then
            lockCamera(AimlockTarget)
        end
    end
end)

-- You can also change the notification after some time, to say "Ready" or remove it
wait(3) -- Wait for 3 seconds before changing the notification message
game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "Whitelisted", 
    Text = "Ready!",
    Icon = "rbxassetid://1234567890", -- Optional icon
    Duration = 3 -- Duration for the "Ready!" message
})
