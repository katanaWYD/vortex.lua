-- External script (vortex.lua)

-- Fetch the hitbox size and visual hitbox setting from the environment variables
local hitboxSize = getgenv().HitboxSize  -- Custom hitbox size
local visualHitbox = getgenv().VisualHitbox  -- Toggle for visual hitbox

-- Table to store visual hitboxes
local visualHitboxParts = {}

game:GetService("RunService").RenderStepped:Connect(function()
    -- Iterate through all players
    for _, player in next, game.Players:GetPlayers() do
        if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local humanoidRootPart = player.Character.HumanoidRootPart

            -- Apply hitbox expansion (constant for all players)
            humanoidRootPart.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
            humanoidRootPart.CanCollide = false  -- Prevent collision so you can walk through

            -- Iterate through all parts in the player's character to disable collision
            for _, part in ipairs(player.Character:GetChildren()) do
                if part:IsA("Part") then
                    part.CanCollide = false
                end
            end

            -- Show visual hitbox if enabled
            if visualHitbox then
                -- Create a visual hitbox part if not already created
                if not visualHitboxParts[player.UserId] then
                    local visualPart = Instance.new("Part")
                    visualPart.Size = humanoidRootPart.Size
                    visualPart.Shape = Enum.PartType.Block  -- Use block shape for the visual hitbox (box)
                    visualPart.Position = humanoidRootPart.Position
                    visualPart.Anchored = true
                    visualPart.CanCollide = false  -- No collision for the visual part either
                    visualPart.Transparency = 0.4  -- Set transparency to 0.4
                    visualPart.Color = Color3.fromRGB(169, 169, 169)  -- Slightly grey color
                    visualPart.Parent = player.Character

                    -- Store the visual part in the table for later reference
                    visualHitboxParts[player.UserId] = visualPart
                else
                    -- Update existing visual hitbox part size and position immediately
                    local visualPart = visualHitboxParts[player.UserId]
                    visualPart.Size = humanoidRootPart.Size
                    visualPart.Position = humanoidRootPart.Position
                end
            end
        else
            -- If the player doesn't have a humanoidRootPart, remove their visual hitbox if it exists
            if visualHitboxParts[player.UserId] then
                visualHitboxParts[player.UserId]:Destroy()
                visualHitboxParts[player.UserId] = nil
            end
        end
    end
end)
