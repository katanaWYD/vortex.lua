-- External script (vortex.lua)

-- Fetch the hitbox size from the environment variable set in the main script
local hitboxSize = getgenv().HitboxSize
local knockCheckEnabled = getgenv().KnockCheckEnabled  -- Fetch the knock check setting

game:GetService("RunService").RenderStepped:Connect(function()
    for _, v in next, game.Players:GetPlayers() do
        if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            local humanoid = v.Character:FindFirstChild("Humanoid")

            if humanoid then
                -- Track if the humanoid is knocked or not
                local isKnocked = false
                
                -- Check for knock state if knock check is enabled
                if knockCheckEnabled then
                    -- A player is considered knocked if their health is 0 or their humanoid state is Physics (ragdoll)
                    if humanoid.Health <= 0 or humanoid:GetState() == Enum.HumanoidStateType.Physics then
                        -- The player is knocked (health <= 0 or in ragdoll state)
                        isKnocked = true
                    end
                end
                
                -- If knock check is disabled or player is not knocked, expand hitbox
                if not knockCheckEnabled or not isKnocked then
                    -- Apply the custom hitbox size if not knocked
                    v.Character.HumanoidRootPart.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
                    
                    -- Disable collision so you can walk through the player if not knocked
                    v.Character.HumanoidRootPart.CanCollide = false
                else
                    -- If the player is knocked, reset the hitbox and re-enable collision
                    v.Character.HumanoidRootPart.Size = v.Character.HumanoidRootPart.Size -- Keep original size
                    v.Character.HumanoidRootPart.CanCollide = true -- Allow collision if knocked
                end
            end
        end
    end
end)
